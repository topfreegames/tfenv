#!/usr/bin/env bash
# Summary: Show the current Terraform version
set -e

[ -n "${TFENV_DEBUG}" ] && set -x
source "${TFENV_ROOT}/libexec/helpers"

[ -d "${TFENV_CONFIG_DIR}/versions" ] \
  || error_and_die "No versions of terraform installed. Please install one with: tfenv install"

TFENV_VERSION_FILE="$(tfenv-version-file)"
TFENV_VERSION="$(cat "${TFENV_VERSION_FILE}" || true)"

if [[ "${TFENV_VERSION}" =~ ^latest.*$ ]]; then
  [[ "${TFENV_VERSION}" =~ ^latest\:.*$ ]] && regex="${TFENV_VERSION##*\:}"
  version="$(\ls "${TFENV_CONFIG_DIR}/versions" \
    | sort -t'.' -k 1nr,1 -k 2nr,2 -k 3nr,3 \
    | grep -e "${regex}" \
    | head -n 1
  )"
  [ -n "${version}" ] || error_and_die "No installed versions of terraform matched '${TFENV_VERSION}'"
  TFENV_VERSION="${version}"
fi

[ -z "${TFENV_VERSION}" ] \
  && error_and_die "Version could not be resolved (set by ${TFENV_VERSION_FILE} or tfenv use <version>)"

version_exists() {
  local version="${1}"
  [ -d "${TFENV_CONFIG_DIR}/versions/${version}" ]
}

if version_exists "${TFENV_VERSION}"; then
  echo "${TFENV_VERSION}"
else
  error_and_die "version '${TFENV_VERSION}' is not installed (set by ${TFENV_VERSION_FILE})"
fi
